#version @VERSION_GLSL@

// Since OpenGL ES 3.1 doesn't support image format layout qualifiers of r8, YUV channels are packed using the four RGBA channels
layout(binding=0, rgba8ui) uniform readonly mediump uimage2D imYTex;   // Luminance
layout(binding=1, rgba8ui) uniform readonly mediump uimage2D imCTex;   // Cr, Cb

layout(binding=2, rgba32f) uniform writeonly mediump image2D colorImage; // RGB, Alpha not used

layout (local_size_x = 8, local_size_y = 8) in;

const float Gamma = 2.4;

vec3 sRGB2linRGB(in vec3 sRGB) {
	vec3 rgb = sRGB;

	for (int i = 0; i < 3; i++) {
		if (rgb[i] <= 0.04045)
			rgb[i] /= 12.92;
		else
			rgb[i] = pow((rgb[i] + 0.055) / 1.055, Gamma);
	}

	return rgb;
}

void main() {
	ivec2 colorImageSize = imageSize(colorImage);
	
	ivec2 pos = ivec2(gl_GlobalInvocationID.xy);
	
	if(pos.x >= colorImageSize.x)
		return;
	if(pos.y >= colorImageSize.y)
		return;
	
	ivec2 posY = pos;
	int chanIdx = (posY.x % 4);
	posY.x /= 4;
	float Y = float(imageLoad(imYTex, posY)[chanIdx])/255.0;
	
	ivec2 posC = pos / 2;
	posC.x *= 2;
	
	ivec2 posCr = posC;
	chanIdx = (posCr.x % 4);
	posCr.x /= 4;
	float Cr = float(imageLoad(imCTex, posCr)[chanIdx])/255.0 - 0.5;
	
	ivec2 posCb = posC + ivec2(1, 0);
	chanIdx = (posCb.x % 4);
	posCb.x /= 4;
	float Cb = float(imageLoad(imCTex, posCb)[chanIdx])/255.0 - 0.5;

	vec3 sRGB;
	sRGB.r = clamp(Y + 1.5958*Cr, 0.0, 1.0);
	sRGB.g = clamp(Y - 0.39173*Cb - 0.81290*Cr, 0.0, 1.0);
	sRGB.b = clamp(Y + 2.017*Cb, 0.0, 1.0);

	vec3 linRGB = sRGB2linRGB(sRGB);
		
	imageStore(colorImage, pos, vec4(linRGB, 1.0f));
}
