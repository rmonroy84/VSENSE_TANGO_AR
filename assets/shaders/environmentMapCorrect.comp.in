#version @VERSION_GLSL@

uniform ivec2 numWG;

layout(binding=0, rgba32f) uniform readonly mediump image2D samplesRef;  // RGB-D (Reliability as depth's sign)
layout(binding=1, rgba32f) uniform readonly mediump image2D samplesCur;  // RGB-D (Reliability as depth's sign)

layout(binding=2, r32f) uniform coherent mediump image2D matAAcc;
layout(binding=3, r32f) uniform coherent mediump image2D matBAcc;
layout(binding=4, r32f) uniform coherent mediump image2D wCurAcc;
layout(binding=5, r32f) uniform coherent mediump image2D wRefAcc;
layout(binding=6, r32f) uniform coherent mediump image2D usedAcc;

layout(binding=7, r32f) uniform writeonly mediump image2D finalData;

#define LOCAL_SIZE 8

const int SharedSize = LOCAL_SIZE*LOCAL_SIZE;

layout (local_size_x = LOCAL_SIZE, local_size_y = LOCAL_SIZE) in;

shared mat3 sharedMatA[SharedSize];
shared mat3 sharedMatB[SharedSize];
shared vec3 sharedWCur[SharedSize];
shared vec3 sharedWRef[SharedSize];
shared int sharedUsed[SharedSize];

const float BetaAt = 2.0;
const float BetaCt = 8.0;
const float CorrGamma = 0.05;
const float MaxDepthDiff = 0.01;

const float Gamma = 2.4;
const float InvGamma = 1.0/Gamma;

vec3 linRGB2sRGB(in vec3 rgb) {
	vec3 sRGB = rgb;

	for (int i = 0; i < 3; i++) {
		if (sRGB[i] <= 0.0031308)
			sRGB[i] *= 12.92;
		else
			sRGB[i] = 1.055*pow(sRGB[i], InvGamma) - 0.055;

		sRGB[i] = min(1.0, sRGB[i]);
	}

	return sRGB;
}

vec3 rgb2hsv(in vec3 rgb) {
	vec3 hsv = vec3(0.0, 0.0, 0.0);
	vec3 sRGB = rgb;

	sRGB = linRGB2sRGB(rgb);
	
	float minVal = min(sRGB.r, min(sRGB.g, sRGB.b));
	float maxVal = max(sRGB.r, max(sRGB.g, sRGB.b));
	float chroma = maxVal - minVal;	

	hsv[2] = maxVal;	

	if (chroma != 0.0) { // Chroma = 0 is undefined
		hsv[1] = chroma / maxVal;

		if (sRGB.r == maxVal){
			hsv[0] = (sRGB.g - sRGB.b) / chroma;
			
			if (sRGB.r < sRGB.b)
				hsv[0] += 6.0;		
		} else if (sRGB.g == maxVal)
			hsv[0] = 2.0 + ((sRGB.b - sRGB.r) / chroma);
		else if (sRGB.b == maxVal)		
			hsv[0] = 4.0 + ((sRGB.r - sRGB.g) / chroma);		

		hsv[0] /= 6.0;

		if (hsv[0] < 0.0)
			hsv[0] = 1.0 - hsv[0];
	}

	return hsv;
}

void main() {
	ivec2 localInv = ivec2(gl_LocalInvocationID.xy);
	
	if(int(gl_NumWorkGroups.x) == 1) { // Final accumulation
		if(localInv.x != 0)
			return;
		if(localInv.y != 0)
			return;
		
		mat3 matA = mat3(0.0);
		mat3 matB = mat3(0.0);
		vec3 wCur = vec3(0.0, 0.0, 0.0);
		vec3 wRef = vec3(0.0, 0.0, 0.0);
		float totalUsed = 0.0;
		
		for(int i = 0; i < numWG.x; i++) {		
			for(int j = 0; j < numWG.y; j++) {
				ivec2 curPos = ivec2(i, j);			
				totalUsed += imageLoad(usedAcc, curPos).r;

				for(int k = 0; k < 3; k++) {
					wCur[k] += imageLoad(wCurAcc, ivec2(curPos.x*3 + k, curPos.y)).r;
					wRef[k] += imageLoad(wRefAcc, ivec2(curPos.x*3 + k, curPos.y)).r;
				}
				
				curPos *= 3;			
				for(int k = 0; k < 3; k++) {
					for(int l = 0; l < 3; l++) {
						ivec2 curPosAcc = curPos + ivec2(k, l);
						matA[k][l] += imageLoad(matAAcc, curPosAcc).r;
						matB[k][l] += imageLoad(matBAcc, curPosAcc).r;					
					}
				}
			}
		}	

		for(int i = 0; i < 3; i++)
			wCur[i] = wRef[i]*CorrGamma/wCur[i];
			
		matA[0][0] += CorrGamma;
		matA[1][1] += CorrGamma;
		matA[2][2] += CorrGamma;

		matB[0][0] += wCur[0];
		matB[1][1] += wCur[1];
		matB[2][2] += wCur[2];

		imageStore(finalData, ivec2(6, 0), vec4(totalUsed, 1.0, 1.0, 1.0));
		for(int i = 0; i < 3; i++) {
			for(int j = 0; j < 3; j++) {
				imageStore(finalData, ivec2(i, j), vec4(matA[i][j], 1.0, 1.0, 1.0));
				imageStore(finalData, ivec2(i + 3, j), vec4(matB[i][j], 1.0, 1.0, 1.0));
			}
		}		

		return;
	}


	ivec2 pos = ivec2(gl_GlobalInvocationID.xy);	
	ivec2 samplesSize = imageSize(samplesRef);

	int sharedIdx = int(localInv.y*LOCAL_SIZE + localInv.x);
	mat3 curMatA = mat3(0.0);
	mat3 curMatB = mat3(0.0);
	vec3 wCur = vec3(0.0, 0.0, 0.0);
	vec3 wRef = vec3(0.0, 0.0, 0.0);
	int curUsed = 0;
	for(int offsetY = 0; offsetY < 4; offsetY++) {
		int y = pos.y*4 + offsetY;		
		if(y >= samplesSize.y)
			break;

		for(int offsetX = 0; offsetX < 4; offsetX++) {
			int x = pos.x*4 + offsetX;
			if(x >= samplesSize.x)
				break;

			ivec2 posLocal = ivec2(x, y);			
			
			vec4 sampleRef = imageLoad(samplesRef, posLocal);			
			if(sampleRef.a == 0.0) // No available reference data
				continue;

			vec4 sampleCur = imageLoad(samplesCur, posLocal);			
			if(sampleCur.a == 0.0) // No available current data
				continue;

			if (abs(abs(sampleRef.a) - abs(sampleCur.a)) >= MaxDepthDiff) // If the difference with the current and current depth is larger than allowed
				continue;

			vec3 curHSV = rgb2hsv(sampleCur.rgb);
			vec3 refHSV = rgb2hsv(sampleRef.rgb);

			float difH = curHSV[0] - refHSV[0];
			float difS = curHSV[1] - refHSV[1];
			float dist = sqrt(difH*difH + difS*difS);

			float wAt = pow(1.0 - min(1.0, dist), BetaAt);
			float wCt = pow(1.0 - min(1.0, dist), BetaCt);			

			wCur += wAt*sampleCur.rgb;
			wRef += wAt*sampleRef.rgb;	

			vec3 wSampleCur = sampleCur.rgb*wCt;			
			
			curMatA[0][0] += wSampleCur.r*sampleCur.r;
			curMatA[1][1] += wSampleCur.g*sampleCur.g;
			curMatA[2][2] += wSampleCur.b*sampleCur.b;
			curMatA[0][1] += wSampleCur.r*sampleCur.g;
			curMatA[0][2] += wSampleCur.r*sampleCur.b;
			curMatA[1][2] += wSampleCur.g*sampleCur.b;

			curMatB[0][0] += wSampleCur.r*sampleRef.r;
			curMatB[1][1] += wSampleCur.g*sampleRef.g;
			curMatB[2][2] += wSampleCur.b*sampleRef.b;
			curMatB[0][1] += wSampleCur.r*sampleRef.g;
			curMatB[0][2] += wSampleCur.r*sampleRef.b;
			curMatB[1][0] += wSampleCur.g*sampleRef.r;
			curMatB[1][2] += wSampleCur.g*sampleRef.b;
			curMatB[2][0] += wSampleCur.b*sampleRef.r;
			curMatB[2][1] += wSampleCur.b*sampleRef.g;
			
			curUsed++;
		}
	}
	
	// Matrix A is symmetric 
	curMatA[1][0] = curMatA[0][1];
	curMatA[2][0] = curMatA[0][2];
	curMatA[2][1] = curMatA[1][2];
	
	for(int i = 0; i < 3; i++) {
		for(int j = 0; j < 3; j++) {
			sharedMatA[sharedIdx][i][j] = curMatA[i][j];
			sharedMatB[sharedIdx][i][j] = curMatB[i][j];
		}			
	}
	sharedWCur[sharedIdx] = wCur;
	sharedWRef[sharedIdx] = wRef;
	sharedUsed[sharedIdx] = curUsed;
	
	// Block until all shared memory slots are filled	
	memoryBarrierShared();
	barrier();
	
	if(localInv.x != 0)
		return;
	if(localInv.y != 0)
		return;
	 
	curMatA = mat3(0.0);
	curMatB = mat3(0.0);
	curUsed = 0;
	wCur = vec3(0.0, 0.0, 0.0);
	wRef = vec3(0.0, 0.0, 0.0);
	for(int i = 0; i < SharedSize; i++) {
		for(int j = 0; j < 3; j++) {
			for(int k = 0; k < 3; k++) {
				curMatA[j][k] += sharedMatA[i][j][k];
				curMatB[j][k] += sharedMatB[i][j][k];		
			}	
		}
		curUsed += sharedUsed[i];
		wCur += sharedWCur[i];
		wRef += sharedWRef[i];
	}
	
	ivec2 posMat = ivec2(gl_WorkGroupID.xy);
	imageStore(usedAcc, posMat, vec4(curUsed, 1.0, 1.0, 1.0));

	for(int i = 0; i < 3; i++) {
		imageStore(wCurAcc, ivec2(posMat.x*3 + i, posMat.y), vec4(wCur[i], 1.0, 1.0, 1.0));
		imageStore(wRefAcc, ivec2(posMat.x*3 + i, posMat.y), vec4(wRef[i], 1.0, 1.0, 1.0));
	}

	posMat *= 3;
	for(int i = 0; i < 3; i++) {
		for(int j = 0; j < 3; j++) {
			ivec2 curPosMat = posMat + ivec2(i, j);
			imageStore(matAAcc, curPosMat, vec4(curMatA[i][j], 1.0, 1.0, 1.0));
			imageStore(matBAcc, curPosMat, vec4(curMatB[i][j], 1.0, 1.0, 1.0));			
		}
	}
}
